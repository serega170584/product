// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: internal/proto/product.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductHandlerClient is the client API for ProductHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductHandlerClient interface {
	Email(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*EmailReply, error)
	Sms(ctx context.Context, in *SmsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type productHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewProductHandlerClient(cc grpc.ClientConnInterface) ProductHandlerClient {
	return &productHandlerClient{cc}
}

func (c *productHandlerClient) Email(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*EmailReply, error) {
	out := new(EmailReply)
	err := c.cc.Invoke(ctx, "/product.handler.v1.ProductHandler/Email", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productHandlerClient) Sms(ctx context.Context, in *SmsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/product.handler.v1.ProductHandler/Sms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productHandlerClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/product.handler.v1.ProductHandler/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductHandlerServer is the server API for ProductHandler service.
// All implementations must embed UnimplementedProductHandlerServer
// for forward compatibility
type ProductHandlerServer interface {
	Email(context.Context, *EmailRequest) (*EmailReply, error)
	Sms(context.Context, *SmsRequest) (*emptypb.Empty, error)
	List(context.Context, *ListRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedProductHandlerServer()
}

// UnimplementedProductHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedProductHandlerServer struct {
}

func (UnimplementedProductHandlerServer) Email(context.Context, *EmailRequest) (*EmailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Email not implemented")
}
func (UnimplementedProductHandlerServer) Sms(context.Context, *SmsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sms not implemented")
}
func (UnimplementedProductHandlerServer) List(context.Context, *ListRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedProductHandlerServer) mustEmbedUnimplementedProductHandlerServer() {}

// UnsafeProductHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductHandlerServer will
// result in compilation errors.
type UnsafeProductHandlerServer interface {
	mustEmbedUnimplementedProductHandlerServer()
}

func RegisterProductHandlerServer(s grpc.ServiceRegistrar, srv ProductHandlerServer) {
	s.RegisterService(&ProductHandler_ServiceDesc, srv)
}

func _ProductHandler_Email_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductHandlerServer).Email(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.handler.v1.ProductHandler/Email",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductHandlerServer).Email(ctx, req.(*EmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductHandler_Sms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductHandlerServer).Sms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.handler.v1.ProductHandler/Sms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductHandlerServer).Sms(ctx, req.(*SmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductHandler_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductHandlerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.handler.v1.ProductHandler/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductHandlerServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductHandler_ServiceDesc is the grpc.ServiceDesc for ProductHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.handler.v1.ProductHandler",
	HandlerType: (*ProductHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Email",
			Handler:    _ProductHandler_Email_Handler,
		},
		{
			MethodName: "Sms",
			Handler:    _ProductHandler_Sms_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ProductHandler_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/product.proto",
}
